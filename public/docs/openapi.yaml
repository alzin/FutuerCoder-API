openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://futuercoder-api-production.up.railway.app'
paths:
  /api/blogs:
    post:
      summary: 'Show the form for creating a new resource.'
      operationId: showTheFormForCreatingANewResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: ut
                description:
                  type: string
                  description: ''
                  example: et
              required:
                - title
                - description
      security: []
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/blogs/store:
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
              required:
                - image
      security: []
  '/api/blogs/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: emk
                description:
                  type: string
                  description: ''
                  example: nulla
              required:
                - title
                - description
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the blog.'
        example: tenetur
        required: true
        schema:
          type: string
  /api/subscribers:
    post:
      summary: ''
      operationId: postApiSubscribers
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: camilla03@example.com
              required:
                - email
      security: []
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/courses:
    post:
      summary: 'Show the form for creating a new resource.'
      operationId: showTheFormForCreatingANewResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: labore
                description:
                  type: string
                  description: ''
                  example: harum
              required:
                - title
                - description
      security: []
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/courses/courseById:
    get:
      summary: 'get course by the student Age'
      operationId: getCourseByTheStudentAge
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  '/api/courses/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: gsnpmaldnrromwg
                description:
                  type: string
                  description: ''
                  example: laudantium
              required:
                - title
                - description
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the course.'
        example: expedita
        required: true
        schema:
          type: string
  /api/courses_time:
    post:
      summary: 'Show the form for creating a new resource.'
      operationId: showTheFormForCreatingANewResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId:
                  type: string
                  description: ''
                  example: rerum
                SessionTimings:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2024-09-22T23:04:35'
                startTime:
                  type: string
                  description: 'Must be a valid date in the format <code>H:i:s</code>.'
                  example: '23:04:35'
                endTime:
                  type: string
                  description: 'Must be a valid date in the format <code>H:i:s</code>.'
                  example: '23:04:35'
              required:
                - courseId
                - SessionTimings
                - startTime
                - endTime
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  '/api/courses_time/{userId}':
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: 'this function will display the time of course based on the user timezone'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: userId
        description: ''
        example: quo
        required: true
        schema:
          type: string
  '/api/courses_time/courseDays/{id}/{courseId}':
    get:
      summary: 'get all dates for course based in user timezone'
      operationId: getAllDatesForCourseBasedInUserTimezone
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the courseDay.'
        example: sequi
        required: true
        schema:
          type: string
      -
        in: path
        name: courseId
        description: ''
        example: similique
        required: true
        schema:
          type: string
  '/api/courses_time/availableTimes/{course_id}/{sessionTimie}/{userId}':
    get:
      summary: 'git all times for a course date (startTime,endTime) based on user timezone'
      operationId: gitAllTimesForACourseDatestartTimeendTimeBasedOnUserTimezone
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: course_id
        description: 'The ID of the course.'
        example: voluptate
        required: true
        schema:
          type: string
      -
        in: path
        name: sessionTimie
        description: ''
        example: in
        required: true
        schema:
          type: string
      -
        in: path
        name: userId
        description: ''
        example: itaque
        required: true
        schema:
          type: string
  /api/courses_time/timezone:
    post:
      summary: ''
      operationId: postApiCourses_timeTimezone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  '/api/courses_time/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the courses time.'
        example: exercitationem
        required: true
        schema:
          type: string
  /api/guest_users:
    post:
      summary: 'Show the form for creating a new resource.'
      operationId: showTheFormForCreatingANewResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: ''
                  example: aut
                lastName:
                  type: string
                  description: ''
                  example: maiores
                age:
                  type: string
                  description: ''
                  example: qui
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: ellsworth37@example.net
                timeZone:
                  type: string
                  description: ''
                  example: eum
              required:
                - firstName
                - lastName
                - age
                - email
                - timeZone
      security: []
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ''
                  example: laudantium
              required:
                - id
      security: []
  '/api/guest_users/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId:
                  type: string
                  description: ''
                  example: officia
                firstName:
                  type: string
                  description: ''
                  example: veritatis
                lastName:
                  type: string
                  description: ''
                  example: ea
                age:
                  type: string
                  description: ''
                  example: accusamus
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: aliza.wiza@example.com
              required:
                - courseId
                - firstName
                - lastName
                - age
                - email
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the guest user.'
        example: omnis
        required: true
        schema:
          type: string
  /api/free_lessons:
    post:
      summary: 'Show the form for creating a new resource.'
      operationId: showTheFormForCreatingANewResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ''
                  example: 8
                courseId:
                  type: integer
                  description: ''
                  example: 11
                time:
                  type: string
                  description: ''
                  example: quas
              required:
                - userId
                - courseId
                - time
      security: []
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ''
                  example: exercitationem
              required:
                - id
      security: []
  /api/free_lessons/createSession:
    post:
      summary: ''
      operationId: postApiFree_lessonsCreateSession
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CourseId:
                  type: string
                  description: ''
                  example: reprehenderit
                SessionTimings:
                  type: string
                  description: ''
                  example: sit
                guestUserId:
                  type: string
                  description: ''
                  example: magnam
              required:
                - CourseId
                - SessionTimings
                - guestUserId
      security: []
  '/api/free_lessons/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionTime:
                  type: string
                  description: ''
                  example: tempore
                meetUrl:
                  type: string
                  description: ''
                  example: deserunt
              required:
                - sessionTime
                - meetUrl
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the free lesson.'
        example: expedita
        required: true
        schema:
          type: string
  /api/Testimonial:
    post:
      summary: 'Show the form for creating a new resource.'
      operationId: showTheFormForCreatingANewResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: ''
                  example: modi
                lastName:
                  type: string
                  description: ''
                  example: ducimus
                age:
                  type: string
                  description: ''
                  example: aspernatur
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: frieda.kutch@example.org
                timeZone:
                  type: string
                  description: ''
                  example: voluptas
              required:
                - firstName
                - lastName
                - age
                - email
                - timeZone
      security: []
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ''
                  example: laborum
              required:
                - id
      security: []
  '/api/Testimonial/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId:
                  type: string
                  description: ''
                  example: ratione
                firstName:
                  type: string
                  description: ''
                  example: inventore
                lastName:
                  type: string
                  description: ''
                  example: id
                age:
                  type: string
                  description: ''
                  example: sit
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: angeline.kuphal@example.org
              required:
                - courseId
                - firstName
                - lastName
                - age
                - email
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the Testimonial.'
        example: sit
        required: true
        schema:
          type: string
  /api/users:
    get:
      summary: ''
      operationId: getApiUsers
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  '/api/users/{id}':
    get:
      summary: ''
      operationId: getApiUsersId
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    put:
      summary: ''
      operationId: putApiUsersId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: fgqybalctvbwzawksswi
                email:
                  type: string
                  description: ''
                  example: null
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '^8cdozUr%qTr;q?'
      security: []
    delete:
      summary: ''
      operationId: deleteApiUsersId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: assumenda
        required: true
        schema:
          type: string
  /api/users/signIn:
    post:
      summary: ''
      operationId: postApiUsersSignIn
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yiecmafawsnlypt
                lastName:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: owuh
                age:
                  type: string
                  description: ''
                  example: magnam
                timeZone:
                  type: string
                  description: ''
                  example: et
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: rebeca28@example.org
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '7|G"Y,V5$7g[o<^p]5X'
              required:
                - firstName
                - lastName
                - age
                - timeZone
                - email
                - password
      security: []
  /api/register1:
    post:
      summary: 'Handle an incoming registration request.'
      operationId: handleAnIncomingRegistrationRequest
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: zrthtzhgrqiqi
                lastName:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: njzpuhrfbvjwizgpmnxyy
                age:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 41
                timeZone:
                  type: string
                  description: ''
                  example: beatae
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: mario.carroll@example.com
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: )-%)_vClGE5h(p
              required:
                - firstName
                - lastName
                - age
                - timeZone
                - email
                - password
      security: []
  '/api/email/verify/{id}/{hash}':
    get:
      summary: "Mark the authenticated user's email address as verified."
      operationId: markTheAuthenticatedUsersEmailAddressAsVerified
      description: ''
      parameters: []
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid signature.'
                properties:
                  message:
                    type: string
                    example: 'Invalid signature.'
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify.'
        example: impedit
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: ''
        example: iusto
        required: true
        schema:
          type: string
  '/api/verify-subscriber-email/{token}':
    get:
      summary: ''
      operationId: getApiVerifySubscriberEmailToken
      description: ''
      parameters: []
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid or expired verification token.'
                properties:
                  message:
                    type: string
                    example: 'Invalid or expired verification token.'
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: token
        description: ''
        example: reiciendis
        required: true
        schema:
          type: string
  '/api/verify-guest-email/{token}':
    get:
      summary: ''
      operationId: getApiVerifyGuestEmailToken
      description: ''
      parameters: []
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid or expired verification token.'
                properties:
                  message:
                    type: string
                    example: 'Invalid or expired verification token.'
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: token
        description: ''
        example: et
        required: true
        schema:
          type: string
tags:
  -
    name: Endpoints
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
